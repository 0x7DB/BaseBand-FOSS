// forge's stuff 

buildscript {
    repositories {
        jcenter()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'SpongePowered'
            url = 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.4-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'

    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'eclipse'


def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 12
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1     // ref: refs/heads/master

    if(isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}



version "DR"
group project.modGroup
archivesBaseName = "BaseBand-pre"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}




minecraft {
    version = project.forgeVersion
    runDir = 'run'
    mappings = project.mcpVersion
    coreMod = 'dev.jess.baseband.client.mixin.Core.CoreMod'
    makeObfSourceJar = false
}

repositories {
    maven {
        name = 'spongepowered-repo'
        url = 'https://repo.spongepowered.org/maven/'
    }
    maven {
        name = 'impactdevelopment-repo'
        url = 'https://impactdevelopment.github.io/maven/'
    }
    maven {
        name = 'swt-repo'
        url = "http://maven-eclipse.github.io/maven"
    }
    maven {
        name = "jitpack.io"
        url = "https://jitpack.io"
    }
    mavenCentral()
}

compileJava {
    String contents = modVersion
    File update = file 'src/main/java/dev/jess/baseband/client/api/Main/BaseBand.java'
    contents = update.getText( 'UTF-8' )
    contents = contents.replaceAll( 'hash = "(.*?)"', 'hash = "' + getCheckedOutGitCommitHash() + '"' )
    update.write( contents, 'UTF-8' )
}





dependencies {
    //mixin needs to be distributed with the mod, very important
    compile("org.spongepowered:mixin:0.7.11-SNAPSHOT") {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
    }
    compile group: 'net.jodah', name: 'typetools', version: '0.5.0'
    compile 'org.json:json:20211205'
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.19'
    compile(group: 'org.reflections', name: 'reflections', version: '0.9.11') {
        exclude group: 'com.google.guava', module: 'guava'
    }
    compile(files('libs/de.tudbut.api.jar'))
    compile(files('noincludelib/baritone.jar'))
    implementation 'org.jetbrains:annotations:15.0'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version



    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    // move _at.cfg into META-INF
    rename '(.+_at.cfg)', 'META-INF/$1'
}



shadowJar {
    dependencies {
        include(dependency('org.spongepowered:mixin'))
        include(dependency('net.jodah:typetools'))
        include(dependency('org.yaml:snakeyaml'))
        include(dependency('org.reflections:reflections'))
        include(dependency('org.javassist:javassist'))
        include(dependency('org.json:json'))
    }
    exclude 'baritone/**' //lmao
    exclude 'mixins.baritone.json'
    exclude 'mixins.baritone.refmap.json'
    //include 'version.properties'

    exclude 'dummyThing'
    exclude 'LICENSE.txt'
    classifier = ''

}

mixin {
    defaultObfuscationEnv searge
    add sourceSets.main, 'mixins.baseband.refmap.json'
}

reobf {
    jar {
        mappingType = 'SEARGE'
    }

    shadowJar {
        mappingType = 'SEARGE'
        classpath = sourceSets.main.compileClasspath
    }
}

jar {
    manifest {
        attributes(
                'Mixin-Config': 'mixins.baseband.json',
                'Mixin-Refmap': 'mixins.baseband.refmap.json',
                "LaunchClass": "com.baseband.launch.LoaderEntryPoint",
                'MixinConfigs': 'mixins.baseband.json',
                'tweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': 0,
                'FMLCorePluginContainsFMLMod': 'true',
                'FMLCorePlugin': 'dev.jess.baseband.client.mixin.Core.CoreMod',
                'ForceLoadAsMod': 'true',
                'FMLAT': 'baseband_at.cfg'
        )
    }
}

build.dependsOn(shadowJar)
